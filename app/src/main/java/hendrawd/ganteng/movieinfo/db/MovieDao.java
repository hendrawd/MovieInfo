package hendrawd.ganteng.movieinfo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import hendrawd.ganteng.movieinfo.db.Movie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE".
*/
public class MovieDao extends AbstractDao<Movie, String> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Poster_path = new Property(0, String.class, "poster_path", false, "POSTER_PATH");
        public final static Property Original_title = new Property(1, String.class, "original_title", false, "ORIGINAL_TITLE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Overview = new Property(3, String.class, "overview", false, "OVERVIEW");
        public final static Property Release_date = new Property(4, String.class, "release_date", false, "RELEASE_DATE");
        public final static Property Backdrop_path = new Property(5, String.class, "backdrop_path", false, "BACKDROP_PATH");
        public final static Property Vote_average = new Property(6, Float.class, "vote_average", false, "VOTE_AVERAGE");
        public final static Property Id = new Property(7, String.class, "id", true, "ID");
        public final static Property Genre_ids = new Property(8, String.class, "genre_ids", false, "GENRE_IDS");
    };


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE\" (" + //
                "\"POSTER_PATH\" TEXT," + // 0: poster_path
                "\"ORIGINAL_TITLE\" TEXT," + // 1: original_title
                "\"TITLE\" TEXT," + // 2: title
                "\"OVERVIEW\" TEXT," + // 3: overview
                "\"RELEASE_DATE\" TEXT," + // 4: release_date
                "\"BACKDROP_PATH\" TEXT," + // 5: backdrop_path
                "\"VOTE_AVERAGE\" REAL," + // 6: vote_average
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 7: id
                "\"GENRE_IDS\" TEXT);"); // 8: genre_ids
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        String poster_path = entity.getPoster_path();
        if (poster_path != null) {
            stmt.bindString(1, poster_path);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(2, original_title);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(4, overview);
        }
 
        String release_date = entity.getRelease_date();
        if (release_date != null) {
            stmt.bindString(5, release_date);
        }
 
        String backdrop_path = entity.getBackdrop_path();
        if (backdrop_path != null) {
            stmt.bindString(6, backdrop_path);
        }
 
        Float vote_average = entity.getVote_average();
        if (vote_average != null) {
            stmt.bindDouble(7, vote_average);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(8, id);
        }
 
        String genre_ids = entity.getGenre_ids();
        if (genre_ids != null) {
            stmt.bindString(9, genre_ids);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7);
    }    

    /** @inheritdoc */
    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // poster_path
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // original_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // overview
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // release_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // backdrop_path
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // vote_average
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // genre_ids
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setPoster_path(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOriginal_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOverview(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelease_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBackdrop_path(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVote_average(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGenre_ids(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Movie entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Movie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
